version: '3.8'

services:
  evolution-api:
    image: atendai/evolution-api:v2.1.1
    container_name: evolution_api
    restart: always
    ports:
      - "8080:8080"
    environment:
      # Server Configuration
      - SERVER_TYPE=http
      - SERVER_PORT=8080
      - SERVER_URL=http://localhost:8080
      
      # CORS Configuration
      - CORS_ORIGIN=*
      - CORS_METHODS=GET,POST,PUT,DELETE
      - CORS_CREDENTIALS=true
      
      # Log Configuration
      - LOG_LEVEL=ERROR
      - LOG_COLOR=true
      - LOG_BAILEYS=false
      
      # Database Configuration (PostgreSQL)
      - DATABASE_ENABLED=true
      - DATABASE_CONNECTION_URI=postgresql://evolution:evolution@postgres:5432/evolution
      - DATABASE_CONNECTION_CLIENT_NAME=evolution_api
      
      # Redis Configuration
      - REDIS_ENABLED=true
      - REDIS_URI=redis://redis:6379
      - REDIS_PREFIX_KEY=evolution_api
      
      # RabbitMQ Configuration
      - RABBITMQ_ENABLED=false
      
      # WebSocket Configuration
      - WEBSOCKET_ENABLED=true
      - WEBSOCKET_GLOBAL_EVENTS=false
      
      # WhatsApp Configuration
      - WA_BUSINESS_TOKEN_WEBHOOK=evolution
      - WA_BUSINESS_URL=https://graph.facebook.com
      - WA_BUSINESS_VERSION=v18.0
      - WA_BUSINESS_LANGUAGE=pt_BR
      
      # Instance Configuration
      - CONFIG_SESSION_PHONE_CLIENT=Evolution API
      - CONFIG_SESSION_PHONE_NAME=Chrome
      - CONFIG_SESSION_PHONE_VERSION=2.3000.1026946712
      
      # Authentication Configuration
      - AUTHENTICATION_TYPE=apikey
      - AUTHENTICATION_API_KEY=B6D711FCDE4D4FD5936544120E713976
      - AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=true
      
      # Global Webhook
      - WEBHOOK_GLOBAL_URL=http://host.docker.internal:8000/api/v1/whatsapp/webhook
      - WEBHOOK_GLOBAL_ENABLED=true
      - WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS=false
      
      # QR Code Configuration
      - QRCODE_LIMIT=30
      - QRCODE_COLOR=#198754
      
      # Typebot Integration
      - TYPEBOT_ENABLED=false
      
      # Chatwoot Integration
      - CHATWOOT_ENABLED=false
      
      # OpenAI Integration
      - OPENAI_ENABLED=false
      
      # Dify Integration
      - DIFY_ENABLED=false
      
      # S3 Configuration
      - S3_ENABLED=false
      
      # SQS Configuration
      - SQS_ENABLED=false
      
      # Cleanup Configuration
      - CLEAN_STORE_CLEANING_INTERVAL=7200
      - CLEAN_STORE_MESSAGES=true
      - CLEAN_STORE_MESSAGE_UP_TO=false
      - CLEAN_STORE_CONTACTS=true
      - CLEAN_STORE_CHATS=true
      
      # Cache Configuration
      - CACHE_REDIS_ENABLED=true
      - CACHE_REDIS_URI=redis://redis:6379
      - CACHE_REDIS_PREFIX_KEY=evolution_api_cache
      - CACHE_REDIS_TTL=604800
      - CACHE_LOCAL_ENABLED=false
    
    depends_on:
      - postgres
      - redis
    
    volumes:
      - evolution_instances:/evolution/instances
      - evolution_store:/evolution/store
    
    networks:
      - evolution_network

  postgres:
    image: postgres:15-alpine
    container_name: evolution_postgres
    restart: always
    environment:
      - POSTGRES_DB=evolution
      - POSTGRES_USER=evolution
      - POSTGRES_PASSWORD=evolution
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - evolution_network

  redis:
    image: redis:7-alpine
    container_name: evolution_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - evolution_network

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: evolution_redis_commander
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - evolution_network

volumes:
  evolution_instances:
  evolution_store:
  postgres_data:
  redis_data:

networks:
  evolution_network:
    driver: bridge